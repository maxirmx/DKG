// Copyright (C) 2024 Maxim [maxirmx] Samsonov (www.sw.consulting)
// All rights reserved.
// This file is a part of dkg applcation
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

using dkg.group;
using dkg.poly;

namespace dkg
{
    // DistKeyShare holds the share of a distributed key for a participant.
    public class DistKeyShare(IPoint[] commits, PriShare share, IScalar[] privatePoly) : IEquatable<DistKeyShare>
    {
        // Coefficients of the public polynomial holding the public key.
        public IPoint[] Commits { get; set; } = commits;

        // Share of the distributed secret which is private information.
        public PriShare Share { get; set; } = share;

        // Coefficients of the private polynomial generated by the node holding the
        // share. The final distributed polynomial is the sum of all these
        // individual polynomials, but it is never computed.
        public IScalar[] PrivatePoly { get; set; } = privatePoly;

        // Public returns the public key associated with the distributed private key.
        public IPoint Public()
        {
            return Commits[0];
        }

        // PriShare implements the DistKeyShare interface (???) so either pedersen or
        // rabin dkg can be used with dss.
        public PriShare PriShare()
        {
            return Share;
        }

        // Commitments implements the dss.DistKeyShare interface (???) so either pedersen or
        // rabin dkg can be used with dss.
        public IPoint[] Commitments()
        {
            return Commits;
        }

        // Renew adds the new distributed key share g (with secret 0) to the distributed key share d.
        public DistKeyShare Renew(DistKeyShare g)
        {
            // Check G(0) = 0*G.
            if (!g.Public().Equals(Suite.G.Base().Mul(Suite.G.Scalar().Zero())))
            {
                throw new DkgError("Wrong renewal function", GetType().Name);
            }

            // Check whether they have the same index
            if (Share.I != g.Share.I)
            {
                throw new DkgError("Not the same party", GetType().Name);
            }

            var newShare = Share.V.Add(g.Share.V);
            var newCommits = new IPoint[Commits.Length];
            for (int i = 0; i < newCommits.Length; i++)
            {
                newCommits[i] = Commits[i].Add(g.Commits[i]);
            }
            return new DistKeyShare(newCommits, new PriShare(Share.I, newShare), PrivatePoly);
        }

        public bool Equals(DistKeyShare? other)
        {
            if (other == null)
                return false;

            if (ReferenceEquals(this, other))
                return true;

            if (Commits.Length != other.Commits.Length)
                return false;

            for (int i = 0; i < Commits.Length; i++)
            {
                if (!Commits[i].Equals(other.Commits[i]))
                    return false;
            }
            return true;
        }

        public override bool Equals(object? obj)
        {
            return Equals(obj as DistKeyShare);
        }

        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = 17;
                foreach (var coeff in PrivatePoly)
                {
                    hash = hash * 23 + (coeff != null ? coeff.GetHashCode() : 0);
                }
                foreach (var commit in Commits)
                {
                    hash = hash * 23 + (commit != null ? commit.GetHashCode() : 0);
                }
                hash = hash * 23 + (Share != null ? Share.GetHashCode() : 0);
                return hash;
            }
        }
    }
}